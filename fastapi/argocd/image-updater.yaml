# -- Replica count for the deployment. It is not advised to run more than one replica.
replicaCount: 1
image:
  # -- Default image repository
  repository: quay.io/argoprojlabs/argocd-image-updater
  # -- Default image pull policy
  pullPolicy: Always
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""

# -- The deployment strategy to use to replace existing pods with new ones
updateStrategy:
  type: Recreate
# -- ImagePullSecrets for the image updater deployment
imagePullSecrets: []
# -- Global name (argocd-image-updater.name in _helpers.tpl) override
nameOverride: ""
# -- Global fullname (argocd-image-updater.fullname in _helpers.tpl) override
fullnameOverride: ""
# -- Global namespace (argocd-image-updater.namespace in _helpers.tpl) override
namespaceOverride: ""

# -- Create cluster roles for cluster-wide installation.
## Used when you manage applications in the same cluster where Argo CD Image Updater runs.
## If you want to use this, please set `.Values.rbac.enabled` true as well.
createClusterRoles: true

# -- Extra arguments for argocd-image-updater not defined in `config.argocd`.
# If a flag contains both key and value, they need to be split to a new entry.
extraArgs: []
  # - --disable-kubernetes
  # - --dry-run
  # - --health-port
  # - 8080
  # - --interval
  # - 2m
  # - --kubeconfig
  # - ~/.kube/config
  # - --match-application-name
  # - staging-*
  # - --max-concurrency
  # - 5
  # - --once
  # - --registries-conf-path
  # - /app/config/registries.conf

# -- Extra environment variables for argocd-image-updater.
## These variables are also available to the authentication scripts mounted under /scripts, provided 'authScripts.enabled' is set to 'true'.
extraEnv: []

# -- Extra envFrom to pass to argocd-image-updater
extraEnvFrom:
  - secretRef:
      name: aiu-git-https
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

# -- Extra K8s manifests to deploy for argocd-image-updater.
## Note: Supports use of custom Helm templates.
extraObjects: []

# -- Init containers to add to the image updater pod
initContainers: []

# -- Priority class for the deployment
# @default -- `""`
priorityClassName: ""

# -- Additional volumeMounts to the image updater main container
volumeMounts: []

# -- Additional volumes to the image updater pod
volumes: []
  ## Use init containers to configure custom tooling
  ## https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools/
  ## When using the volumes & volumeMounts section bellow, please comment out those above.
  #  - name: custom-tools
  #    emptyDir: {}

config:
  gitCommitUser: "Argo CD"
  gitCommitMail: "argocd@local"
  gitCommitTemplate: "chore: bump {{ .Image }} to {{ .NewTag }}"
  
  # -- Name of the ConfigMap
  name: argocd-image-updater-config
  # -- API kind that is used to manage Argo CD applications (`kubernetes` or `argocd`)
  applicationsAPIKind: ""

  # Described in detail here https://argocd-image-updater.readthedocs.io/en/stable/install/reference/#flags
  # Note: this is only relevant if config.applicationsAPIKind == 'argocd'
  argocd:
    # -- Use the gRPC-web protocol to connect to the Argo CD API
    grpcWeb: true
    # -- Connect to the Argo CD API server at server address
    serverAddress: ""
    # -- If specified, the certificate of the Argo CD API server is not verified.
    insecure: false
    # -- If specified, use an unencrypted HTTP connection to the Argo CD API instead of TLS.
    plaintext: false
    # -- If specified, the secret with Argo CD API key will be created.
    token: ""
    # -- Name of the Secret containing the token
    tokenSecretName: "argocd-image-updater-secret"

  # -- Disable kubernetes events
  disableKubeEvents: false

  # -- Username to use for Git commits
  gitCommitUser: ""

  # -- E-Mail address to use for Git commits
  gitCommitMail: ""

  # -- Changing the Git commit message
  gitCommitTemplate: ""

  # -- Path to public SSH key mounted in container, or GPG key ID used to sign commits
  gitCommitSigningKey: ""

  # -- Enables sign off on commits
  gitCommitSignOff: false

  # -- Method used to sign Git commits. `openpgp` or `ssh`
  gitCommitSigningMethod: ""

  # -- Argo CD Image Update log level
  logLevel: "info"

  # -- Argo CD Image Updater registries list configuration. More information [here](https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/).
  registries:
    - name: ECR
      api_url: https://720736521509.dkr.ecr.ap-south-1.amazonaws.com
      prefix: 720736521509.dkr.ecr.ap-south-1.amazonaws.com
      ping: yes
      insecure: no
      credentials: ext:/scripts/ecr_login.sh
      credsexpire: 6h

  sshConfig:
    # -- Name of the sshConfig ConfigMap
    name: argocd-image-updater-ssh-config
    # -- Argo CD Image Updater ssh client parameter configuration
    config: ""

# whether to mount authentication scripts, if enabled, the authentication scripts will be mounted on /scripts that can be used to authenticate with registries (Azure, ECR)
# refer to https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/#specifying-credentials-for-accessing-container-registries for more info
authScripts:
  # -- the scripts will be mounted at `/scripts`
  enabled: true
  scripts:
    ecr_login.sh: |
      #!/bin/sh
      set -eu

      # Redirect AWS CLI writes to a writable path
      export HOME=/tmp
      mkdir -p /tmp/.aws
      export AWS_CONFIG_FILE=/tmp/.aws/config
      export AWS_SHARED_CREDENTIALS_FILE=/tmp/.aws/credentials
      export AWS_EC2_METADATA_DISABLED=true

      REGION="${AWS_REGION:-ap-south-1}"
      PASSWORD="$(aws --no-cli-pager ecr get-login-password --region "$REGION")"
      # single line, no trailing newline:
      printf 'AWS:%s' "$PASSWORD"

serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::720736521509:role/eks-argocd-image-updater
  name: eks-argocd-image-updater

# -- Pod Annotations for the deployment
podAnnotations: {}

# -- Pod Labels for the deployment
podLabels: {}
  # azure.workload.identity/use: "true"

# -- Pod security context settings for the deployment
podSecurityContext: {}
  # fsGroup: 2000

# -- Security context settings for the deployment
# @default -- See [values.yaml]
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

rbac:
  # -- Enable RBAC creation
  enabled: true

# -- Pod memory and cpu resource settings for the deployment
resources: {}

# -- Kubernetes nodeSelector settings for the deployment
nodeSelector: {}

# -- Kubernetes toleration settings for the deployment
tolerations: []

# -- Kubernetes affinity settings for the deployment
affinity: {}

# Metrics configuration
metrics:
  # -- Deploy metrics service
  enabled: false
  service:
    # -- Metrics service annotations
    annotations: {}
    # -- Metrics service labels
    labels: {}
    # -- Metrics service port
    servicePort: 8081
  serviceMonitor:
    # -- Enable a prometheus ServiceMonitor
    enabled: false
    # -- Prometheus ServiceMonitor interval
    interval: 30s
    # -- Prometheus [RelabelConfigs] to apply to samples before scraping
    relabelings: []
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Prometheus ServiceMonitor selector
    selector: {}
      # promtheus: kube-prometheus

    # -- Prometheus ServiceMonitor namespace
    namespace: ""
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}

